
Question link :- https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

class Solution{
    private:
    bool isSafeMove(int x, int y, int n,vector<vector<int>> m, vector<vector<int>> visited){
        
        if(x>=0 && x<n && y>=0 && y<=n-1 && visited[x][y]==0 && m[x][y]==1){
            return true;
        }
        
        return false;
    }
    void solve(vector<vector<int>> &m, int n,int x, int y,  string path,vector<string>& ans,  vector<vector<int>>& visited)
    {
           if(x==n-1 && y==n-1){
               ans.push_back(path);
               return;
           } 
           
           visited[x][y]=1;
           
          if(isSafeMove(x,y+1,n,m,visited)){//right move
              path.push_back('R');
              solve(m,n,x,y+1,path,ans,visited);
              path.pop_back();
          }
          if(isSafeMove(x,y-1,n,m,visited)){//left move
              path.push_back('L');
              solve(m,n,x,y-1,path,ans,visited);
              path.pop_back();
          }
          if(isSafeMove(x-1,y,n,m,visited)){//upper move
              path.push_back('U');
              solve(m,n,x-1,y,path,ans,visited);
              path.pop_back();
          }
          if(isSafeMove(x+1,y,n,m,visited)){//down move--
              path.push_back('D');
              solve(m,n,x+1,y,path,ans,visited);
              path.pop_back();
          }
           visited[x][y]=0;
        
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<vector<int>> visited= m;
           vector<string> ans;
        if(m[0][0]==0)
        return ans;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                visited[i][j]=0;
            }
        }
     
        string path;
        int srcx=0;
        int srcy=0;
        solve(m,n,srcx,srcy,path,ans,visited);
        
        sort(ans.begin(), ans.end());
        
        return ans;
    }
};
